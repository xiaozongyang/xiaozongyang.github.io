<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiao Zongyang&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiaozongyang.github.io/"/>
  <updated>2021-03-20T16:06:54.513Z</updated>
  <id>http://xiaozongyang.github.io/</id>
  
  <author>
    <name>Xiao Zongyang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>arts-20210320</title>
    <link href="http://xiaozongyang.github.io/2021/03/20/arts-20210320/"/>
    <id>http://xiaozongyang.github.io/2021/03/20/arts-20210320/</id>
    <published>2021-03-20T15:25:54.058Z</published>
    <updated>2021-03-20T16:06:54.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><ul><li>题目: <a href="https://leetcode-cn.com/problems/beautiful-arrangement/" target="_blank" rel="noopener">优美的排列</a></li><li>分析<ol><li>优美的排列是一种特殊的排列，需要计算出全排列，然后看某个排列是否符合优美的定义，可以用“回溯“来解决</li><li>根据 <a href="">labuladong</a> <a href="">这篇文章</a>给出的回溯算法框架，只需要确定两个动作就可以<ol><li>选择：将当前遍历的节点加入到路径中，即当某个数字 n 在位置 i 上符合”优美“的定义时，将其加入到选择列表中</li><li>取消选择：将当前遍历的节点从选择路径中去掉，进行下一次尝试</li></ol></li></ol></li><li>解法：<ol><li>维护以下几个变量进行回溯递归<ul><li>n 排列长度</li><li>selected 数组，保存已经选择的数字</li><li>ls 已选择的元素个数</li><li>result 保存计数结果</li></ul></li><li>当 ls 长度和 n 相等时，结束递归，返回 count</li></ol></li><li>代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countArrangement</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> []selected = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span> ls = <span class="number">0</span>;</span><br><span class="line">        Result result = <span class="keyword">new</span> Result();</span><br><span class="line"></span><br><span class="line">        backtrace(selected, ls, n, result);</span><br><span class="line">        <span class="keyword">return</span> result.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">backtrace</span><span class="params">(<span class="keyword">int</span>[] selected, <span class="keyword">int</span> ls, <span class="keyword">int</span> n, Result result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ls == selected.length) &#123;</span><br><span class="line">            result.count += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (contains(selected, j) || !isPerfect(ls + <span class="number">1</span>, j)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// select</span></span><br><span class="line">            selected[ls] = j;</span><br><span class="line">            backtrace(selected, ls + <span class="number">1</span>, n, result);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// unselect</span></span><br><span class="line">            selected[ls] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">int</span>[] selected, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> s: selected) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s == j) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPerfect</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i % n == <span class="number">0</span> || n % i == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>一点优化<ul><li>motivation<ol><li>每次回溯时都需要遍历所有的数字，这些数子中部分已经在 selected 数组里了，这部分明显是不符合要求的，因为排列不允许有重复数字</li><li>每次判断当前数字是否已经被选过了，需要自己实现一个数组的 contains 方法，时间复杂度为 O(N)，这个操作比较费时</li></ol></li><li>solution<ol><li>额外维护一个 candidates 数组，来实时维护有哪些元素是备选</li><li>额外维护一个 lc 变量，表示数组实际长度</li><li>当一个元素从 candidates 中被选走时，将其和数组中最后一个元素交换，并将 lc -1</li><li>当回溯结束后，需要取消选择时，再执行一次 swap 操作，原来的元素就被换回来了</li></ol><ul><li>代码如下，从 leetcode 的结果来看，耗时从 235ms 减小到 48ms，说明优化有效<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countArrangement</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> []selected = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span> ls = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> []candidates = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            candidates[i] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Result result = <span class="keyword">new</span> Result();</span><br><span class="line"></span><br><span class="line">        backtrace(<span class="number">1</span>, result, selected, ls, candidates, n);</span><br><span class="line">        <span class="keyword">return</span> result.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">backtrace</span><span class="params">(<span class="keyword">int</span> index, Result result, <span class="keyword">int</span>[] selected, <span class="keyword">int</span> ls, <span class="keyword">int</span>[] candidates,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> lc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ls == selected.length) &#123;</span><br><span class="line">            result.count += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lc; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isNotPerfect(index, candidates[i])) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            selected[ls] = candidates[i];</span><br><span class="line">            swap(candidates, i, lc - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            backtrace(index + <span class="number">1</span>, result, selected, ls + <span class="number">1</span>, candidates, lc - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            swap(candidates, i, lc - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = candidates[j];</span><br><span class="line">        candidates[j] = candidates[i];</span><br><span class="line">        candidates[i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNotPerfect</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i % n != <span class="number">0</span> &amp;&amp; n % i != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><ul><li>原文地址： <a href="https://valyala.medium.com/improving-histogram-usability-for-prometheus-and-grafana-bc7e5df0e350" target="_blank" rel="noopener">Improving histogram usability for Prometheus and Grafana</a></li><li>本文介绍了 Prometheus 原生的 Histogram 存在的 3 个问题，进而介绍了 VictoriaMetrics 为此所做的努力，以及 Histogram 的几种场景<ol><li>Prometheus Histogram 的问题<ol><li>bucket 范围无法很好地适应实际的数据分布，原因在于业务迭代时数据点分布可能会发生变化，会导致需要一直调整 bucket range，难以维护</li><li>bucket 数量过多导致时间序列基数过大，导致一系列问题，包括内存占用增长、磁盘占用增长、插入效率降低、查询效率降低</li><li>对于同一个 metric，如果两个 TS bucket range 不一致，则这两个 TS 无法进行聚合查询</li></ol></li><li>VictoriaMetrics 的解法<ol><li>sdk 内置 bucket range 和数量，避免使用者设置的复杂性</li><li>只暴露 bucket 中元素不为 0 的 bucket 给 prometheus，从而减少时间序列数量</li></ol></li><li>介绍了将 gauge 用 histogram 函数来计算分布，通过 Grafana Heatmap 来可视化的场景，比如进程内存使用量，来了解组织所有服务内存使用分布情况</li></ol></li></ul><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ol><li>Prometheus Blackbox Exporter 适合做拨测，主要原理是提供一个 target 和探测方式，将探测结果生成指标，因此有几个点需要注意<ol><li>只有 blackbox exporter 没办法直接生成观测工具，需要配合 prometheus 或 vmagent 使用</li><li>探测方式和探测地址均由参数指定，需要配合 relabel 配置来保证 label 的正确性</li></ol></li><li>设计系统前，先明确问题的规模、场景，调研后需要做可行性验证<ol><li>设计目标要能量化，除了明确解决什么问题，明确解决到什么程度也必不可少</li></ol></li></ol><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>todo</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Algorithm&quot;&gt;&lt;a href=&quot;#Algorithm&quot; class=&quot;headerlink&quot; title=&quot;Algorithm&quot;&gt;&lt;/a&gt;Algorithm&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;题目: &lt;a href=&quot;https://leetcode-cn.com
      
    
    </summary>
    
    
    
      <category term="ARTS" scheme="http://xiaozongyang.github.io/tags/ARTS/"/>
    
  </entry>
  
  <entry>
    <title>arts-20200705</title>
    <link href="http://xiaozongyang.github.io/2020/07/05/arts-20200705/"/>
    <id>http://xiaozongyang.github.io/2020/07/05/arts-20200705/</id>
    <published>2020-07-05T10:56:36.000Z</published>
    <updated>2021-03-20T15:27:54.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><ul><li>题目：<a href="https://leetcode-cn.com/problems/find-pivot-index/" target="_blank" rel="noopener">LeetCode-724 寻找数据的中心索引</a></li><li>分析<ul><li>根据题目定定义，中心索引 i 左边和右边的元素之和相等，最直接的思路二层循环暴力来算，但是实际上 <ul><li><code>leftSum(i + 1) = leftSum(i) + nums[i]</code>，其中 <code>leftSum(i) = nums[0] + nums[1] + ... + nums[i - 1]</code></li><li><code>rightSum(i + 1) = rightSum(i + 1) + nums[i]</code>，其中 <code>rightSum(i + 1) = nums[i + 2] + nums[i + 3] + ... + nums[nums.length - 1]</code></li></ul></li><li>需要注意情况，当 i 左边或右边没有元素时，和为 0</li></ul></li><li>解法<ol><li>如果 <code>nums.length &lt; 2</code> 则中心索引为 <code>i</code></li><li>先算出 nums[1] 到 nums[nums.length -1] 之和记为初始 rightSum，初始 leftSum 为 0</li><li>从下标 1 开始遍历 nums，如果 leftSum 和 rightSum 相等或i == nums.length 时结束，如果 i &lt; nums.lrgnth 返回 i，否则返回 -1</li></ol></li><li>代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pivotIndex</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (nums.length == <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != nums.length; i++) &#123;</span><br><span class="line">           right += nums[i];</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">while</span> (i &lt; nums.length &amp;&amp; left != right) &#123;</span><br><span class="line">           left += nums[i - <span class="number">1</span>];</span><br><span class="line">           right -= nums[i];</span><br><span class="line">           i++;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> left == right ? i - <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><ul><li>原文地址：<a href="https://pdos.csail.mit.edu/6.824/papers/mapreduce.pdf" target="_blank" rel="noopener">MapReduce: Simplified Data Processing on Large Clusters</a></li><li>Google 经典论文，提出了 MapReduce 编程模型，以及该模型在分布式系统下实现的一些要点和优化<ul><li>背景：Google 处理大规模的数据需要解决并行化、数据分发、故障处理的问题</li><li>解法：提出 MapReduce 的编程模型，隐藏并行、数据分许、故障处理的细节<ul><li>Map: <code>(k1, v1) -&gt; list(k2, v2)</code> 根据输入的 <code>key/value</code> 对生产新的 <code>key/value</code> 对的集合，作为中间结果，<strong>计算逻辑需要用户实现</strong></li><li>Reduce: <code>(k2, list(v2)) -&gt; list(v2)</code> 从同一个 <code>key</code> 有序结合中计算得出最终结果，<strong>计算逻辑需要用户实现</strong></li></ul></li><li>影响<ul><li>提出了处理海量数据的通用方案，推动了大数据计算领域发展</li><li>简化了并行、故障处理逻辑，提升了研发效果</li><li>提供了水平扩展能力，可以通过加机器来提升性能</li></ul></li><li>工程设计<ul><li>Master Slave 架构：Master 负责监控Woker状态、调度任务</li><li>并行策略：<ol><li>输入文件进行按切分，本质是上做分片，每个分片有对应的 Worker 进行处理</li><li>Map 和 Reducer 阶段，Worker 之间没有数据重叠，因此不存在并发问题</li></ol></li><li>故障处理策略：<strong>重新执行</strong><ul><li>执行 Map 任务的 Worker 故障：重新执行该 Worker 的 Map 任务以及相关的 Reduce 任务</li><li>执行 Reduce 任务的 Worker 故障：重新执行该 Worker 的 Reduce 任务</li></ul></li><li>优化<ul><li>本地化：MapReduce 的输入输出为 GFS 分布式文件系统，每个文件存多个副本（通常为3），给 Worker 分配任务时尽量分配给保存输入数据副本的 Worker，不满足条件时，尽量分给靠近持有副本结点的 Worker，降低网络 IO 开销</li><li>Backup：当执行任务快结束时，还有某个结点特别慢（可能是机器硬件差或故障等原因）影响整个任务进度，会在其他结点执行一个 Backup 任务，这两个任务任意一个执行完就算执行完成</li></ul></li></ul></li></ul></li></ul><h1 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h1><ol><li>以 SDK 的形式提供能力是常见的做法，但是升级会非常头疼，可以考虑把 SDK api 声明暴露给用户，以 javaagent 的方式提供实现可以缓解这个问题，可以在这个方向有些探索</li><li>以 javaagent 的方式提供装饰逻辑，来代替 cglib 看起来具有分离、对用户无感知的优点</li></ol><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>读了《非暴力沟通》前两章，有几个印象比较深的点：</p><ol><li>沟通的表达方式很重要，并且是可以后天训练的，有意识的行为比纯本能的行为通常更有效</li><li>学会区分观察和评论，不要习惯性采用防御性的姿态，学会区分是客观事实的评价，还是主观个人的评论</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Algorithm&quot;&gt;&lt;a href=&quot;#Algorithm&quot; class=&quot;headerlink&quot; title=&quot;Algorithm&quot;&gt;&lt;/a&gt;Algorithm&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;题目：&lt;a href=&quot;https://leetcode-cn.com/
      
    
    </summary>
    
    
    
      <category term="ARTS" scheme="http://xiaozongyang.github.io/tags/ARTS/"/>
    
  </entry>
  
  <entry>
    <title>arts-20200628</title>
    <link href="http://xiaozongyang.github.io/2020/06/29/arts-20200628/"/>
    <id>http://xiaozongyang.github.io/2020/06/29/arts-20200628/</id>
    <published>2020-06-28T16:43:55.000Z</published>
    <updated>2021-03-20T15:25:12.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="比特位计数"><a href="#比特位计数" class="headerlink" title="比特位计数"></a>比特位计数</h2><p>题目：给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。</p><ul><li>Sample 1<ul><li>input: 2</li><li>output: [0, 1, 1]</li></ul></li><li>Sample 2<ul><li>input: 5</li><li>output: [0, 1, 1, 2, 1, 2]<br>给出 O(n) 一趟遍历的解法</li></ul></li></ul><p>分析：</p><ol><li>设计算 n 的 bits 中 1 的个数的过程为 f(n)，则输出为 <code>[f(0), f(1), ..., f(n)]</code>，至少需要遍历一遍</li><li>根据题目要求，联想到<strong>只有当前的状态可以根据前一步状态来简单计算来得到</strong>才能满足要求，看起来是个标准的 dp</li><li>dp 方程<ol><li>首先盲猜 <code>n</code> 和 <code>n-1</code> 的关系，简单列举了几个不太有思路</li><li>然后想到 int 有移位操作，特别是右移位(<code>&gt;&gt;</code>)时，符号位不变，对于正整数来说减少了一个1，所以有 <code>f(n) = f(n &gt;&gt; 1) + g(n)</code> 其中 <code>g(n)</code>是 n 最低位 1 的个数，我们知道<ol><li>n 为奇数时 <code>n % 2 == 1</code>, n 为偶数时 <code>n % 2 == 0</code></li><li><code>n % 2</code> 等价于 <code>n &amp; 1</code>，且后者更快<br>因此 <code>f(n) = f(n &gt;&gt; 1) + (n &amp; 1)</code></li></ol></li></ol></li><li>最终代码如下<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</span><br><span class="line">        <span class="keyword">int</span> [] bits = <span class="keyword">new</span> <span class="keyword">int</span>[num + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bits;</span><br><span class="line">        &#125;</span><br><span class="line">        bits[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= num; i++) &#123;</span><br><span class="line">            bits[i] = bits[i &gt;&gt; <span class="number">1</span>] + (i &amp; <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>看了 disscuss，发现有大佬提到 <code>n &amp; (n - 1)</code> 可以去掉最后一个 1，因此还有一种解法 <code>f(n) = f(n &amp; (n - 1)) + 1</code></li></ol><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><blockquote><p>Embracing Immutable Architecture <a href="https://medium.com/react-weekly/embracing-immutable-architecture-dc04e3f08543" target="_blank" rel="noopener">https://medium.com/react-weekly/embracing-immutable-architecture-dc04e3f08543</a></p></blockquote><ol><li>作者认为：<strong>状态</strong>是软件工程复杂性之源，变化的状态让代码难以理解和维护，不可变状态是控制复杂性的有效手段。</li><li>核心要素<ol><li>严格限制的状态转移，例如只允许 <em>pure function</em> 修改状态</li><li>单向数据流</li></ol></li><li>个人理解<ol><li>和 functional programming 理念类似，状态不可变、只允许新增状态，好处是不共享状态所以不会有并发问题</li><li>追求 pure function，会使得函数结果很容易预测，不容易出bug，另外编译器可以提前做优化，性能上有些提升</li><li>并非使用所有场景，每次都创建新的状态可能性能开销很大，需要工程师作出权衡</li><li>基础架构领域也有这个趋势，例如部署方式上 Docker 和 tomcat war 包的区别，前者每次部署都使用新 image，而后者是在同一个 web container 做原地升级</li></ol></li></ol><h1 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h1><ol><li>关于 kotlin 的实践<ol><li>kotlin 和 java 混写<ol><li>不能使用 lombok<ul><li>原因<ul><li>根据官方的说法，kotlin 和 java 混写时，需要 kotlin 在 java 之前被编译see <a href="https://kotlinlang.org/docs/reference/using-maven.html" target="_blank" rel="noopener">https://kotlinlang.org/docs/reference/using-maven.html</a></li><li>lombok 是编译时注解，Getter, Setter, Constructor 等根据注解生成的方法都需要编译成字节码之后才有</li></ul></li><li>解决办法<ul><li>把 带lombok 注解的 java 代码用插件 Delombok</li></ul></li></ul></li><li>编译插件配置<ul><li>需要为 <code>kotlin-maven-plugin</code> 指定 java 和 kotlin 源代码路径，e.g.<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jetbrains.kotlin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kotlin-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;kotlin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sourceDirs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">sourceDir</span>&gt;</span>$&#123;project.basedir&#125;/src/main/kotlin<span class="tag">&lt;/<span class="name">sourceDir</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">sourceDir</span>&gt;</span>$&#123;project.basedir&#125;/src/main/java<span class="tag">&lt;/<span class="name">sourceDir</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">sourceDirs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span></span></span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li>打包指定 Main Class<ul><li>原因：在 java 项目打包时，通常需要指定 Main Class 作为项目的入口，而在纯 kotlin 代码中，<code>main</code> 函数通常是下面这种写法<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Foo.kt</span></span><br><span class="line"><span class="comment">// empty class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>看了下编译结果，编译生成的类为 <code>FooKt.class</code>，在 pom 里写上就ok了<h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1>benchmark 是工程是进行性能分析的必备工具，jmh 作为 openjdk 生态中的重要工具，广泛应用在各大开源项目中，本文简单介绍下 jmh 的 HelloWorld，作为工程师快速上手 jmh 的小参考, see <a href="./hello-jmh.md">openjdk tools - Hello jmh</a></li></ul></li></ol></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Algorithm&quot;&gt;&lt;a href=&quot;#Algorithm&quot; class=&quot;headerlink&quot; title=&quot;Algorithm&quot;&gt;&lt;/a&gt;Algorithm&lt;/h1&gt;&lt;h2 id=&quot;比特位计数&quot;&gt;&lt;a href=&quot;#比特位计数&quot; class=&quot;header
      
    
    </summary>
    
    
    
      <category term="ARTS" scheme="http://xiaozongyang.github.io/tags/ARTS/"/>
    
  </entry>
  
  <entry>
    <title>hello-jmh</title>
    <link href="http://xiaozongyang.github.io/2020/06/29/hello-jmh/"/>
    <id>http://xiaozongyang.github.io/2020/06/29/hello-jmh/</id>
    <published>2020-06-28T16:43:31.000Z</published>
    <updated>2021-03-20T15:25:12.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hello-Jmh"><a href="#Hello-Jmh" class="headerlink" title="Hello Jmh"></a>Hello Jmh</h1><blockquote><p>本文将介绍如何使用 jmh 工具做简单的 benchmark</p></blockquote><h2 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h2><ol><li>在项目中引入依赖</li><li>编写 benchmark 方法</li><li>配置 pom</li><li>构建并启动 benchmark</li></ol><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><ol><li><p>在 maven 中添加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jmh.version</span>&gt;</span>1.23<span class="tag">&lt;/<span class="name">jmh.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jmh.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写 benchmark</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.xiaozy</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.annotations.Benchmark</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.annotations.BenchmarkMode</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.annotations.Fork</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.annotations.Measurement</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.annotations.Mode</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.annotations.OutputTimeUnit</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.annotations.Scope</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.annotations.State</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.annotations.Threads</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.annotations.Warmup</span><br><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaozy01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-06-18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@State(Scope.Benchmark)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.SECONDS)</span></span><br><span class="line"><span class="meta">@BenchmarkMode(Mode.Throughput)</span></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">SlaveReaderBenachmark</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> ITERATION_COUNT = <span class="number">10</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> WARMUP_COUNT = <span class="number">10</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> THREAD_COUNT = <span class="number">4</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> FORK_COUNT = <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> singleDb: JdbcTemplate = createSingleDb()</span><br><span class="line">    <span class="keyword">var</span> connectionClusterDb: JdbcTemplate = createConnectionClusterDb()</span><br><span class="line">    <span class="keyword">var</span> datasourceClusterDb: JdbcTemplate = createDataSourceClusterDb()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@Fork(value = FORK_COUNT)</span></span><br><span class="line">    <span class="meta">@Threads(value = THREAD_COUNT)</span></span><br><span class="line">    <span class="meta">@Warmup(iterations = WARMUP_COUNT)</span></span><br><span class="line">    <span class="meta">@Measurement(iterations = ITERATION_COUNT)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">concate</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"a"</span> + <span class="string">" "</span> +<span class="string">"b"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@Fork(value = FORK_COUNT)</span></span><br><span class="line">    <span class="meta">@Threads(value = THREAD_COUNT)</span></span><br><span class="line">    <span class="meta">@Warmup(iterations = WARMUP_COUNT)</span></span><br><span class="line">    <span class="meta">@Measurement(iterations = ITERATION_COUNT)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">format</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> java.lang.String.format(<span class="string">"%s %s"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置 pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            1. Compile Kotlin sources first.</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kotlin-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jetbrains.kotlin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">               Put an approriate Kotlin compiler version here.</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;kotlin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>process-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">sourceDirs</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">sourceDir</span>&gt;</span>$&#123;project.basedir&#125;/src/main/kotlin<span class="tag">&lt;/<span class="name">sourceDir</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">sourceDirs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>process-test-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            2. Invoke JMH generators to produce benchmark code</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>exec-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>process-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>java<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includePluginDependencies</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includePluginDependencies</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>org.openjdk.jmh.generators.bytecode.JmhBytecodeGenerator<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">arguments</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">argument</span>&gt;</span>$&#123;project.basedir&#125;/target/classes/<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">argument</span>&gt;</span>$&#123;project.basedir&#125;/target/generated-sources/jmh/<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">argument</span>&gt;</span>$&#123;project.basedir&#125;/target/classes/<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">argument</span>&gt;</span>$&#123;jmh.generator&#125;<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-generator-bytecode<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jmh.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            3. Add JMH generated code to the compile session.</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>build-helper-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>add-source<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>process-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>add-source<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">sources</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;project.basedir&#125;/target/generated-sources/jmh<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">sources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            4. Compile JMH generated code.</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">compilerVersion</span>&gt;</span>$&#123;javac.target&#125;<span class="tag">&lt;/<span class="name">compilerVersion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;javac.target&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;javac.target&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">compilerArgument</span>&gt;</span>-proc:none<span class="tag">&lt;/<span class="name">compilerArgument</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            5. Package all the dependencies into the JAR</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;-benchmark<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">transformer</span> <span class="attr">implementation</span>=<span class="string">"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>org.openjdk.jmh.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">transformer</span> <span class="attr">implementation</span>=<span class="string">"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                                    Shading signed JARs will fail without this.</span></span><br><span class="line"><span class="comment">                                    http://stackoverflow.com/questions/999489/invalid-signature-file-when-attempting-to-run-a-jar</span></span><br><span class="line"><span class="comment">                                --&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">artifact</span>&gt;</span>*:*<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.SF<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.DSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.RSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>构建并启动</p></li></ol><ul><li>构建 <code>mvn package</code></li><li>启动 <code>java -jar ${project.artifactId}-benchmark.jar</code>，<code>${project.artifactId}</code> 为 benchmark 所在module name</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://openjdk.java.net/projects/code-tools/jmh" target="_blank" rel="noopener">https://openjdk.java.net/projects/code-tools/jmh</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hello-Jmh&quot;&gt;&lt;a href=&quot;#Hello-Jmh&quot; class=&quot;headerlink&quot; title=&quot;Hello Jmh&quot;&gt;&lt;/a&gt;Hello Jmh&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文将介绍如何使用 jmh 工具做简单的 benchmar
      
    
    </summary>
    
    
    
      <category term="java" scheme="http://xiaozongyang.github.io/tags/java/"/>
    
      <category term="jmh" scheme="http://xiaozongyang.github.io/tags/jmh/"/>
    
      <category term="benchmark" scheme="http://xiaozongyang.github.io/tags/benchmark/"/>
    
      <category term="kotlin" scheme="http://xiaozongyang.github.io/tags/kotlin/"/>
    
  </entry>
  
</feed>
